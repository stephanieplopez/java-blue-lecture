{"remainingRequest":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/src/App.vue","mtime":1554306077792},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport City from './components/City.vue'\nimport CityDetail from './components/CityDetail.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    City,\n    CityDetail\n\n  },\n  data() {\n    return {\n        /* The citySelected by the user.  This will be populated when the city-selected event \n         * is caught, and returned to empty when the \"show-all-cities\" event is caught.   Which\n         * child component (City or CityDetail) that is shown is dependent on whether this object is\n         * populated.  It will be passed to the CityDetail component, when populated, for it to display\n         * the City Details.\n         */\n          citySelection: {},\n          // The list of cities to be passed to the City Component which will display them\n          cityList: [\n              {\n                  id: 1,\n                  name: 'Columbus',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 711470\n              },\n              {\n                  id: 2,\n                  name: 'Cleveland',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 478403\n              },\n              {\n                  id: 3,\n                  name: 'London',\n                  district: 'England',\n                  countryCode: 'GBR',\n                  population: 7285000\n              },\n              {\n                  id: 4,\n                  name: 'Seoul',\n                  district: 'Seoul',\n                  countryCode: 'KOR',\n                  population: 9981619\n              },\n              {\n                  id: 5,\n                  name: 'Tokyo',\n                  district: 'Tokyo-to',\n                  countryCode: 'JPN',\n                  population: 7980230\n              },\n              {\n                  id: 6,\n                  name: 'Pittsburgh',\n                  district: 'Pennsylvania',\n                  countryCode: 'USA',\n                  population: 334563\n              },\n              {\n                  id: 7,\n                  name: 'Detroit',\n                  district: 'Michigan',\n                  countryCode: 'USA',\n                  population: 951270\n              },\n              {\n                  id: 8,\n                  name: 'Cincinnati',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 331285\n              }\n\n          ]\n        }\n    },\n    methods: {\n      /*\n      * The method that will handle the city-selected event.  It uses the city object passed in\n      * the event, selectedCity, and sets it to the citySelection variable in this component.\n      */\n      handleCitySelection(selectedCity) {\n        this.citySelection = selectedCity;\n      },\n      handleLoadCities() {\n        console.log(\"Load Cities...\");\n\n        fetch('city.json')\n          .then( response => {\n            return response.json();\n          })\n          .then( data => {\n            // Need to update the DOM by populating the cities\n            this.cityList = data;\n          })\n          .catch( err => console.error(err));\n      }\n    }\n  }\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- Goes here because it's the App.vue's job to load the button -->\n    <button v-if=\"cityList.legth === 0\" \n    v-on:click=\"handleLoadCities\"> Load Cities </button>\n    <!-- The City Detail Component definition  (Shows a single City)\n      v-if   - Only show this component when the citySelection component is NOT empty (has keys)\n      v-bind - bind the CityDetail city prop to the citySelection data element of this component\n      v-on   - event handler for \"show-all-cities\", when caught, it sets the citySelection variable\n               to an empty Object, that causes this component to be removed and the City (list) component\n               to be shown.\n    -->\n    <city-detail  v-if=\"Object.keys(citySelection).length > 0\" \n      v-bind:city=\"citySelection\" \n      v-on:show-all-cities=\"citySelection = {}\"></city-detail>\n    <!-- The City Component defintion (show the City List)\n        v-if   - Only show this component when the citySelection component is empty (has NO keys)\n        v-bind - binds the cities prop (Array) on the City component to the cityList data variable of\n                 this component\n        v-on   - event handler for \"city-selected\".  It calls the handleCitySelection method and by\n                 default passes it the event object, which is the selectedCity. \n    -->\n    <city v-if=\"Object.keys(citySelection).length === 0\" \n      v-bind:cities=\"cityList\" \n      v-on:city-selected=\"handleCitySelection\"></city>\n  </div>\n</template>\n\n<script>\nimport City from './components/City.vue'\nimport CityDetail from './components/CityDetail.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    City,\n    CityDetail\n\n  },\n  data() {\n    return {\n        /* The citySelected by the user.  This will be populated when the city-selected event \n         * is caught, and returned to empty when the \"show-all-cities\" event is caught.   Which\n         * child component (City or CityDetail) that is shown is dependent on whether this object is\n         * populated.  It will be passed to the CityDetail component, when populated, for it to display\n         * the City Details.\n         */\n          citySelection: {},\n          // The list of cities to be passed to the City Component which will display them\n          cityList: [\n              {\n                  id: 1,\n                  name: 'Columbus',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 711470\n              },\n              {\n                  id: 2,\n                  name: 'Cleveland',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 478403\n              },\n              {\n                  id: 3,\n                  name: 'London',\n                  district: 'England',\n                  countryCode: 'GBR',\n                  population: 7285000\n              },\n              {\n                  id: 4,\n                  name: 'Seoul',\n                  district: 'Seoul',\n                  countryCode: 'KOR',\n                  population: 9981619\n              },\n              {\n                  id: 5,\n                  name: 'Tokyo',\n                  district: 'Tokyo-to',\n                  countryCode: 'JPN',\n                  population: 7980230\n              },\n              {\n                  id: 6,\n                  name: 'Pittsburgh',\n                  district: 'Pennsylvania',\n                  countryCode: 'USA',\n                  population: 334563\n              },\n              {\n                  id: 7,\n                  name: 'Detroit',\n                  district: 'Michigan',\n                  countryCode: 'USA',\n                  population: 951270\n              },\n              {\n                  id: 8,\n                  name: 'Cincinnati',\n                  district: 'Ohio',\n                  countryCode: 'USA',\n                  population: 331285\n              }\n\n          ]\n        }\n    },\n    methods: {\n      /*\n      * The method that will handle the city-selected event.  It uses the city object passed in\n      * the event, selectedCity, and sets it to the citySelection variable in this component.\n      */\n      handleCitySelection(selectedCity) {\n        this.citySelection = selectedCity;\n      },\n      handleLoadCities() {\n        console.log(\"Load Cities...\");\n\n        fetch('city.json')\n          .then( response => {\n            return response.json();\n          })\n          .then( data => {\n            // Need to update the DOM by populating the cities\n            this.cityList = data;\n          })\n          .catch( err => console.error(err));\n      }\n    }\n  }\n\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nbody {\n  background: linear-gradient(45deg,  rgba(66, 183, 245,0.8) 0%,rgba(66, 245, 189,0.4) 100%);\n}\n</style>\n"]}]}