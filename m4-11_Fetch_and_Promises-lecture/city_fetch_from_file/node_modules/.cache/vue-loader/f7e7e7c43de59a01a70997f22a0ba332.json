{"remainingRequest":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/src/components/City.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/src/components/City.vue","mtime":1554297922169},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/slopez/Development/java-blue-lecture/m4-11_Fetch_and_Promises-lecture/city_fetch_from_file/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiv.cityList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n\ndiv.cityList div.city { \n    border-radius: 25px;\n    padding: 20px; \n    width: 200px;\n    border: 2px solid black;\n    margin: 1rem;\n    background-color:azure;\n    background: linear-gradient( rgba(66, 183, 245, 0.8) 40%, azure 30%);\n}\n\ndiv.cityLinkDiv {\n  margin-bottom: 50px;\n}\n\ndiv.cityList div.city h2 {\n    padding-bottom: 10px;\n    color: azure;\n    text-shadow: 2px 2px 5px black;\n    justify-content: space-around;\n}\n\ndiv.cityRow {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    height: 30px;   \n    line-height: 30px;\n    border-bottom: 1px solid lightgray;\n    font-family: 'Roboto', sans-serif;\n}\ndiv.cityRow > div.rowTitle {\n    width: 50%;\n    text-align:left;\n    font-weight: 800;\n    \n}\ndiv.cityRow > div.rowData {\n    width: 50%;\n}\n\ndiv.bottomRow {\n    border-bottom: 0px;\n}\n\ndiv.city h2:hover {\n    cursor: pointer;\n    font-weight: 750;\n    text-decoration: underline;\n}\n\n",{"version":3,"sources":["City.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"City.vue","sourceRoot":"src/components","sourcesContent":["<!-- The City Component displays a list of cities passed to it by its parent component -->\n\n<template>\n    <div class=\"cityMain\">\n        <h1>Cities</h1>\n        <div class=\"cityList\">\n            <div class=\"city\" v-for=\"city in cities\" :key=\"city.id\">\n                <!-- The click event calls SelectCityById with the city Id -->\n                <h2  @click.prevent=\"selectCityById(city.id)\">{{city.name}}</h2>\n                <div class=\"cityRow\">\n                    <div class=\"rowTitle\">Country</div>\n                    <div class=\"rowData\">{{ city.countryCode }}</div>\n                </div>\n                <div class=\"cityRow\">\n                    <div class=\"rowTitle\">District</div>\n                    <div class=\"rowData\">{{ city.district }}</div>\n                </div>\n                <div class=\"cityRow bottomRow\">\n                    <div class=\"rowTitle\">Population</div><div class=\"rowData\">{{ city.population }}</div>\n                </div>\n            </div>\n     </div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n    name: 'city',\n    props: {\n        // The prop \"cities\" allows for the Array of cities to be sent by the parent\n        cities: Array  \n    },\n    data() {\n        return {\n            // An empty selected city object to be returned by the component\n            selectedCity: {}\n        }\n    },\n    methods: {\n       /** \n        * Selects the City by Id\n        * @argument id - the City Id\n        */\n        selectCityById(id) {\n            // Find the City by the passed City Id in the Array of Cities\n            this.selectedCity = this.cities.find(city => city.id == id);\n            /*\n             * Raise a new event named \"city-selected\" and pass the city \n             * the user selected as the event argument\n            */\n            this.$emit('city-selected', this.selectedCity);\n        }\n    }\n}\n</script>\n\n<style>\ndiv.cityList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n\ndiv.cityList div.city { \n    border-radius: 25px;\n    padding: 20px; \n    width: 200px;\n    border: 2px solid black;\n    margin: 1rem;\n    background-color:azure;\n    background: linear-gradient( rgba(66, 183, 245, 0.8) 40%, azure 30%);\n}\n\ndiv.cityLinkDiv {\n  margin-bottom: 50px;\n}\n\ndiv.cityList div.city h2 {\n    padding-bottom: 10px;\n    color: azure;\n    text-shadow: 2px 2px 5px black;\n    justify-content: space-around;\n}\n\ndiv.cityRow {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    height: 30px;   \n    line-height: 30px;\n    border-bottom: 1px solid lightgray;\n    font-family: 'Roboto', sans-serif;\n}\ndiv.cityRow > div.rowTitle {\n    width: 50%;\n    text-align:left;\n    font-weight: 800;\n    \n}\ndiv.cityRow > div.rowData {\n    width: 50%;\n}\n\ndiv.bottomRow {\n    border-bottom: 0px;\n}\n\ndiv.city h2:hover {\n    cursor: pointer;\n    font-weight: 750;\n    text-decoration: underline;\n}\n\n</style>\n"]}]}